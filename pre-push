#!/bin/bash

# Part 1: Backup Flatpak overrides
# Source directory for Flatpak override files
SOURCE_DIR="${HOME}/.local/share/flatpak/overrides"

# Destination directory in the repository root
DEST_DIR="$(git rev-parse --show-toplevel)/overrides"

# Create destination directory if it doesn't exist
mkdir -p "$DEST_DIR"

# Copy all files from source directory to destination
cp -r "$SOURCE_DIR"/* "$DEST_DIR"/ 2>/dev/null || true

# Check if there are any changes in overrides
if git status --porcelain "$DEST_DIR" | grep -q .; then
    echo "Changes detected in Flatpak override files. Adding to commit..."

    # Add all changes to Git
    git add "$DEST_DIR"

    # Commit the changes
    git commit -m "Automatic update of Flatpak overrides"

    echo "Flatpak override changes have been added in a new commit."
fi

# Part 2: Create and update app list and reinstall script
REPO_ROOT=$(git rev-parse --show-toplevel)
APP_LIST_FILE="$REPO_ROOT/installed-flatpaks.txt"
REINSTALL_SCRIPT="$REPO_ROOT/reinstall-apps.sh"

# Get current list of installed Flatpak applications
echo "Checking installed Flatpak applications..."
CURRENT_APPS=$(flatpak list --app --columns=application | sort)
CURRENT_APP_COUNT=$(echo "$CURRENT_APPS" | wc -l)

# Check if app list file exists and compare
UPDATE_NEEDED=false
if [ ! -f "$APP_LIST_FILE" ]; then
    # File doesn't exist, create it
    echo "Creating initial Flatpak applications list..."
    echo "$CURRENT_APPS" > "$APP_LIST_FILE"
    UPDATE_NEEDED=true
else
    # File exists, check if content has changed
    STORED_APPS=$(cat "$APP_LIST_FILE")
    STORED_APP_COUNT=$(echo "$STORED_APPS" | wc -l)

    if [ "$CURRENT_APP_COUNT" != "$STORED_APP_COUNT" ] || [ "$(echo "$CURRENT_APPS")" != "$(echo "$STORED_APPS")" ]; then
        echo "Changes detected in installed Flatpak applications..."
        echo "$CURRENT_APPS" > "$APP_LIST_FILE"
        UPDATE_NEEDED=true
    else
        echo "No changes in installed Flatpak applications."
    fi
fi

# Create or update reinstall script if needed
if [ "$UPDATE_NEEDED" = true ]; then
    echo "Updating Flatpak reinstallation script..."

    # Create script file with header
    cat > "$REINSTALL_SCRIPT" << 'EOF'
#!/bin/bash

# Script to reinstall all Flatpak applications
# Automatically generated by pre-push hook

echo "Starting Flatpak applications reinstallation..."

EOF

    # Add execute permission to the script
    chmod +x "$REINSTALL_SCRIPT"

    # For each application, add installation command with verification
    while IFS= read -r app; do
        # Skip empty lines
        if [ -z "$app" ]; then
            continue
        fi

        # Add command to output script with check if already installed
        echo "Adding $app to the script..."
        cat >> "$REINSTALL_SCRIPT" << EOF
# Check and install $app
if ! flatpak list --app --columns=application | grep -q "^$app\$"; then
  echo "Installing $app..."
  flatpak install flathub $app -y
else
  echo "$app is already installed, skipping..."
fi

EOF
    done <<< "$CURRENT_APPS"

    # Add completion message
    cat >> "$REINSTALL_SCRIPT" << 'EOF'
echo "Flatpak applications reinstallation completed!"
EOF

    # Commit the changes to both files
    git add "$APP_LIST_FILE" "$REINSTALL_SCRIPT"
    git commit -m "Automatic update of Flatpak applications list and reinstall script"

    echo "Flatpak applications list and reinstall script have been updated and committed."
else
    echo "No changes needed for Flatpak applications list and reinstall script."
fi

# Try to pull before pushing to avoid rejection
echo "Attempting to pull latest changes to avoid push rejection..."
git pull --rebase origin $(git symbolic-ref --short HEAD) || true

# Exit successfully to allow the push to continue
exit 0
