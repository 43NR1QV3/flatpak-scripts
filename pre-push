#!/bin/bash

# Part 1: Backup Flatpak overrides
# Source directory for Flatpak override files
SOURCE_DIR="${HOME}/.local/share/flatpak/overrides"

# Destination directory in the repository root
DEST_DIR="$(git rev-parse --show-toplevel)/flatpak-overrides"

# Create destination directory if it doesn't exist
mkdir -p "$DEST_DIR"

# Copy all files from source directory to destination
cp -r "$SOURCE_DIR"/* "$DEST_DIR"/ 2>/dev/null || true

# Check if there are any changes in overrides
if git status --porcelain "$DEST_DIR" | grep -q .; then
    echo "Changes detected in Flatpak override files. Adding to commit..."

    # Add all changes to Git
    git add "$DEST_DIR"

    # Commit the changes
    git commit -m "Automatic update of Flatpak overrides"

    echo "Flatpak override changes have been added in a new commit."

    # No need to explicitly push, as the original push will continue after the hook
fi

# Part 2: Create Flatpak reinstall script
# Output file name
OUTPUT_FILE="reinstall-flatpaks.sh"
REPO_ROOT=$(git rev-parse --show-toplevel)
OUTPUT_PATH="$REPO_ROOT/$OUTPUT_FILE"

# Save current installed apps to compare later for changes
if [ -f "$OUTPUT_PATH" ]; then
    OLD_CONTENT=$(cat "$OUTPUT_PATH")
fi

# Create script file with header
cat > "$OUTPUT_PATH" << 'EOF'
#!/bin/bash

# Script to reinstall all Flatpak applications
# Automatically generated by pre-push hook

echo "Starting Flatpak applications reinstallation..."

EOF

# Add execute permission to the script
chmod +x "$OUTPUT_PATH"

# Get list of installed Flatpak applications
echo "Generating list of installed Flatpak applications..."
flatpak_apps=$(flatpak list --app --columns=application)

# For each application, add installation command with verification
for app in $flatpak_apps; do
  # Add command to output script with check if already installed
  echo "Adding $app to the script..."
  cat >> "$OUTPUT_PATH" << EOF
# Check and install $app
if ! flatpak list --app --columns=application | grep -q "^$app\$"; then
  echo "Installing $app..."
  flatpak install flathub $app -y
else
  echo "$app is already installed, skipping..."
fi

EOF
done

# Add completion message
cat >> "$OUTPUT_PATH" << 'EOF'
echo "Flatpak applications reinstallation completed!"
EOF

# Check if the script content has changed or if it's a new file
if [ ! -f "$OUTPUT_PATH.old" ] || [ "$(cat "$OUTPUT_PATH")" != "$OLD_CONTENT" ]; then
    echo "Changes detected in Flatpak applications list. Adding to commit..."

    # Add the script to Git
    git add "$OUTPUT_PATH"

    # Commit the changes
    git commit -m "Automatic update of Flatpak applications list"

    echo "Flatpak reinstallation script has been updated and committed."
fi

echo "Flatpak reinstallation script ready at $OUTPUT_PATH"

# Exit successfully to allow the push to continue
exit 0
